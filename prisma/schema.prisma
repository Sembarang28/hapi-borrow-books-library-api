// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email     String   @db.VarChar(255)
  password  String   @db.VarChar(255)
  role      String   @db.VarChar(10)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  profile   Profile?
  borrow    Borrow[]

  @@map("users")
}

model Profile {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId     String   @unique
  user       User     @relation(fields: [userId], references: [id])
  name       String   @db.VarChar(100)
  job        String   @db.VarChar(100)
  birthDate  DateTime @db.Date
  birthPlace String   @db.VarChar(255)
  address    DateTime @db.Date
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Writers {
  id         Int      @id @default(autoincrement())
  name       String   @db.VarChar(255)
  birthDate  DateTime @db.Date
  birthPlace String   @db.VarChar(255)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  books      Books[]

  @@map("writers")
}

model Publisher {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  address   DateTime @db.Date
  city      String   @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  books     Books[]

  @@map("publishers")
}

model Books {
  id            String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  publisher     Publisher       @relation(fields: [publisherId], references: [id])
  publisherId   Int
  writers       Writers         @relation(fields: [writerId], references: [id])
  writerId      Int
  title         String          @db.VarChar(255)
  year          String          @db.VarChar(4)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  borrowedBooks BorrowedBooks[]

  @@map("books")
}

model BorrowedBooks {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  borrow    Borrow   @relation(fields: [borrowId], references: [id])
  borrowId  String
  books     Books    @relation(fields: [bookId], references: [id])
  bookId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("borrowed_books")
}

model Borrow {
  id            String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user          User            @relation(fields: [userId], references: [id])
  userId        String
  status        String          @db.VarChar(100)
  borrowDate    DateTime        @db.Date
  returnDate    DateTime        @db.Date
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  borrowedBooks BorrowedBooks[]

  @@map("borrow")
}
